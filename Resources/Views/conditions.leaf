#extend("base"):
#export("content"):

#extend("Partials/contentWrapper"):
#export("innerContent"):

<div>
    <h2>Loops</h2>
    <p>
        There is a wide range of applications accomplished with loops. Example below demonstrates how to use loops for rendering multiple objects. It also uses <a href="https://github.com/fananek/Leaf4Demo/blob/master/Resources/Views/partials/card.leaf" target="blank"><codeclass="language-swift hljs"><span class="hljs-keyword">card.leaf</span></code></a> template to render individual cards.
    </p>
    
    #if(count(pageData.cards) > 0):
    <div class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3 pt-6">
        
        <!-- Use card.leaf template for rendering reusable component -->
        #for(card in pageData.cards):
            #extend("Partials/card"):
                #export("cardTitle"):
                    #(card.title)
                #endexport
                #export("cardDescription"):
                    #(card.description)
                #endexport
                #export("cardSvgPath"):
                    #(card.svgPath)
                #endexport
            #endextend
        #endfor

    </div>
    #endif
    
    <h2>Conditions</h2>
    <p>
        Leaf supports conditional statements similar as swift.
    </p>
    <p>
        Our context contains an array of Cards. We know there are exactly six elements. Let's prove it using conditional statements.
    </p>
    <p class="text-red-500">
        #if(count(pageData.cards) == 6):
            There are exactly 6 Card elements.
        #elseif(count(pageData.cards) > 6):
            There are more than 6 Card elements.
        #else:
            There are less then 6 Card elements.
        #endif
    </p>
    
    <h2>Loops meets Conditions</h2>
    <p>
        In many cases you will use both loops and conditional statements together. Example below (zebra striped table) uses loop to render all rows and conditional statement combined with modulo operation to detect even/odd rows and set alternate background color.
    </p>
    
    <div class="flex flex-col">
      <div class="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
        <div class="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
          <div class="overflow-hidden">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-600">
              <thead class="bg-gray-50 dark:bg-gray-800">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                   
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Title
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Description
                  </th>
                </tr>
              </thead>
              <tbody>
                #for(card in pageData.cards):
                <tr class="
                    #if(index % 2 != 0):
                        bg-white dark:bg-gray-800
                    #else:
                        bg-gray-50 dark:bg-gray-700
                    #endif
                    ">
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">
                      
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">
                      #(card.title)
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">
                      #(card.description)
                  </td>
                </tr>
                #endfor

              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

</div>

#endexport
#endextend

#endexport
#endextend
