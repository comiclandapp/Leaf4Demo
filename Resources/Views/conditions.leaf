#extend("base"):
#export("content"):

#extend("partials/contentWrapper"):
#export("innerContent"):

<div>
    <h2>Loops</h2>
    <p>
      There is a wide range of applications accomplished with loops. Example below demonstrates how to use loops for rendering multiple objects. It uses <a href="https://github.com/fananek/Leaf4Demo/blob/master/Resources/Views/partials/card.leaf" target="blank"><codeclass="language-swift hljs"><span class="hljs-keyword">card.leaf</span></code></a> template to render individual cards.
    </p>
    
    #if(count(pageData.cards) > 0):
    <div class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3 pt-6">
        
        <!-- Use card.leaf template for rendering reusable component -->
        #for(card in pageData.cards):
            #extend("partials/card")
        #endfor

    </div>
    #endif

    <h3>For loop properties</h3>
    <p>
      Leaf <codeclass="language-swift hljs"><span class="hljs-keyword">for</span></code> loop declares three variables: <codeclass="language-swift hljs"><span class="hljs-keyword">isFirst</span></code>, 
      <codeclass="language-swift hljs"><span class="hljs-keyword">isLast</span></code> and <codeclass="language-swift hljs"><span class="hljs-keyword">index</span></code>. 
      You can rename the <codeclass="language-swift hljs"><span class="hljs-keyword">index</span></code> variable. It's useful when processing multi-dimensional arrays. 
    </p>
    <p>
      Let's demonstrate on a chessboard, which can be nicely represented by a 2D array.
      </br>
<pre><code class="language-swift hljs">var chessBoard = Array(repeating: Array(repeating: "", count: 8), count: 8)

// Initialize the chess board with starting positions
chessBoard[0] = ["♜", "♞", "♝", "♛", "♚", "♝", "♞", "♜"]
chessBoard[1] = Array(repeating: "♟︎", count: 8)
chessBoard[6] = Array(repeating: "♙", count: 8)
chessBoard[7] = ["♖", "♘", "♗", "♕", "♔", "♗", "♘", "♖"]
</code></pre>
    </p>

    <p>
      Now, let's render the chessboard using Leaf. Since our chessboard is a 2D array, we will use nested loops. To render coordinates and cell colour we must know the current index of the inner and outer loop. Fortunately, we can give a custom name to each of the indices.

<pre><code class="language-html hljs xml">&lt;!-- template.leaf --&gt;
&lt;!-- \#for(indexName, element in array): --&gt;
<span class="hljs-function"><span class="hljs-keyword">\#for</span><span class="hljs-params">(<span class="hljs-string">i, row in board</span>):</span>
  <span class="hljs-function"><span class="hljs-keyword">\#for</span><span class="hljs-params">(<span class="hljs-string">j, field in row</span>):</span>
    <span class="hljs-function"><span class="hljs-keyword">\#if</span><span class="hljs-params">(<span class="hljs-string">(i + j) % 2 == 0</span>):</span>
      &lt;!-- set light backgroud --&gt;
    <span class="hljs-function"><span class="hljs-keyword">\#else</span>:</span>
      &lt;!-- set dark backgroud --&gt;
    <span class="hljs-function"><span class="hljs-keyword">\#endif</span>:</span>

    <span class="hljs-function"><span class="hljs-keyword">\#</span><span class="hljs-params">(<span class="hljs-string">field</span>)</span>
    &lt;!-- render both indicies --&gt;
    <span class="hljs-function">(<span class="hljs-keyword">\#</span><span class="hljs-params"><span class="hljs-string">(i)</span>, </span><span class="hljs-function"><span class="hljs-keyword">\#</span><span class="hljs-params"><span class="hljs-string">(j)</span>)</span>
  <span class="hljs-function"><span class="hljs-keyword">\#endfor</span>:</span>
<span class="hljs-function"><span class="hljs-keyword">\#endfor</span>:</span>
</code></pre>
    </p>
    <p>
      And here we go. This is our shiny chessboard.
    </p>
    <div class="grid grid-cols-8 grid-rows-8 gap-0 text-center grid-flow-row auto-cols-max auto-rows-max">
      #for(i, row in pageData.board):
        #for(j, field in row):
          <div class="#if((i + j) % 2 == 0): bg-gray-300 text-gray-800 #else: bg-gray-800 text-gray-100 #endif content-center">
            <div class="text-5xl">#(field)</br></div>
            <div class="text-xs">(#(i), #(j))</div>
          </div>
        #endfor
    #endfor
    </div>
            
    <h2>Conditions</h2>
    <p>
        Leaf supports conditional statements similar as swift.
    </p>
    <p>
        Our context contains an array of Cards. We know there are exactly six elements. Let's prove it using conditional statements.
    </p>
    <p class="text-red-500">
        #if(count(pageData.cards) == 6):
            There are exactly 6 Card elements.
        #elseif(count(pageData.cards) > 6):
            There are more than 6 Card elements.
        #else:
            There are less then 6 Card elements.
        #endif
    </p>
    
    <h2>Loops meets Conditions</h2>
    <p>
        In many cases you will use both loops and conditional statements together. Example below (zebra striped table) uses loop to render all rows and conditional statement combined with modulo operation to detect even/odd rows and set alternate background color.
    </p>
    
    <div class="flex flex-col">
      <div class="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
        <div class="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
          <div class="overflow-hidden">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-600">
              <thead class="bg-gray-50 dark:bg-gray-800">
                <tr>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                   
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Title
                  </th>
                  <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Description
                  </th>
                </tr>
              </thead>
              <tbody>
                #for(card in pageData.cards):
                <tr class="
                    #if(index % 2 != 0):
                        bg-white dark:bg-gray-800
                    #else:
                        bg-gray-50 dark:bg-gray-700
                    #endif
                    ">
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">
                      
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">
                      #(card.title)
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">
                      #(card.description)
                  </td>
                </tr>
                #endfor

              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

</div>

#endexport
#endextend

#endexport
#endextend
