#extend("base"):
#export("content"):

#extend("partials/contentWrapper"):
#export("innerContent"):

<div>
    <h2>Default tags</h2>
    <p>
        Leaf provides set of default tags like logical and mathematical operators.
    </p>
    
    <dl>
        <dt class="font-semibold">
            <codeclass="language-swift hljs"><span class="hljs-keyword">+ , - , * , / , %</span></code></dt>
            <dd class="pl-4">1 + 1 = <span class="text-red-500">#(1 + 1)</span></dd>
            <dd class="pl-4">5 - 2 = <span class="text-red-500">#(5 - 2)</span></dd>
            <dd class="pl-4">6 / 2 = <span class="text-red-500">#(6 / 2)</span></dd>
            <dd class="pl-4">4 * 3 = <span class="text-red-500">#(4 * 3)</span></dd>
            <dd class="pl-4">5 % 2 = <span class="text-red-500">#(5 % 2)</span></dd>
        <dt class="font-semibold">
            <codeclass="language-swift hljs"><span class="hljs-keyword">> , &lt; , >= , &lt;=</span></code></dt>
            <dd class="pl-4">3 > 1: <span class="text-red-500">#(3 > 1)</span></dd>
            <dd class="pl-4">5 &lt; 2: <span class="text-red-500">#(5 < 2)</span></dd>
            <dd class="pl-4">3 >= 2: <span class="text-red-500">#(3 >= 2)</span></dd>
            <dd class="pl-4">2 &lt;= 2: <span class="text-red-500">#(2 <= 2)</span></dd>
        <dt class="font-semibold">
            <codeclass="language-swift hljs"><span class="hljs-keyword">==</span></code></dt>
            <dd class="pl-4">1 == 1: <span class="text-red-500">#(1 == 1)</span></dd>
        <dt class="font-semibold">
            <codeclass="language-swift hljs"><span class="hljs-keyword">|| , &&</span></code></dt>
            <dd class="pl-4">2 - 2 == 0 || 1 + 3 = 0: <span class="text-red-500">#(2 - 2 == 0 || 1 + 3 == 0)</span></dd>
            <dd class="pl-4">2 - 2 == 0 && 1 + 3 = 0: <span class="text-red-500">#(2 - 2 == 0 && 1 + 3 == 0)</span></dd>
        <dt>etc.</dt>
    </dl>
    
    <h3>Other tags</h3>
    <p>
        Let's demonstrate these tags on a few testing variables.
        <dl>
            <dd>
                <codeclass="language-swift hljs"><span class="hljs-variable">now</span></code>: Date - current date/time
            </dd>
            <dd>
                <codeclass="language-swift hljs"><span class="hljs-variable">name</span></code>: String - "my name is Jane Doe"
            </dd>
            <dd>
                <codeclass="language-swift hljs"><span class="hljs-variable">myArray</span></code>: [String] - contains 7 days ["Mon", "Tue","Wed","Thu","Fri","Sat","Sun"]
            </dd>
        </dl>
    </p>
    
    <p>
        <dl>
            <dt class="font-semibold">
                <codeclass="language-swift hljs"><span class="hljs-keyword">\#count</span></code></dt>
                <dd class="pl-4">myArray contains <span class="text-red-500">#count(pageData.myArray)</span> elements</dd>
            <dt class="font-semibold">
                <codeclass="language-swift hljs"><span class="hljs-keyword">\#lowercased</span></code></dt>
                <dd class="pl-4">lowercased name: <span class="text-red-500">#lowercased(pageData.name)</span></dd>
            <dt class="font-semibold">
                <codeclass="language-swift hljs"><span class="hljs-keyword">\#uppercased</span></code></dt>
                <dd class="pl-4">uppercased name: <span class="text-red-500">#uppercased(pageData.name)</span></dd>
            <dt class="font-semibold">
                <codeclass="language-swift hljs"><span class="hljs-keyword">\#capitalized</span></code></dt>
                <dd class="pl-4">capitalized name: <span class="text-red-500">#capitalized(pageData.name)</span></dd>
            <dt class="font-semibold">
                <codeclass="language-swift hljs"><span class="hljs-keyword">\#contains</span></code></dt>
                <dd class="pl-4">myArray contains "Mon": <span class="text-red-500">#contains(pageData.myArray, "Mon")</span><br>
                myArray contains "January": <span class="text-red-500">#contains(pageData.myArray, "January")</span></dd>
            <dt class="font-semibold">
                <codeclass="language-swift hljs"><span class="hljs-keyword">\#date</span></code></dt>
                <dd class="pl-4">current date in "yyyy-MM-dd hh:mm" format: <span class="text-red-500">#date(now, "yyyy-MM-dd hh:mm")</span></dd>
        </dl>
    </p>
    
    <h3>Tags related to templates</h3>
    see <a href="/templates">Templates</a>
    <p>
        While <codeclass="language-swift hljs"><span class="hljs-keyword">\#import</span></code> tag is pretty straightforward, <codeclass="language-swift hljs"><span class="hljs-keyword">\#export</span></code> and <codeclass="language-swift hljs"><span class="hljs-keyword">\#extend</span></code> tags have two syntactically different forms. With and without body.
<pre><code class="language-html hljs xml">&lt;!-- variant without body --&gt;
&lt;!-- Important: There is no semicolon or closing tag! --&gt;
<span class="hljs-function"><span class="hljs-keyword">\#extend</span><span class="hljs-params">(<span class="hljs-string">"footer"</span>)</span>
    
<span class="hljs-function"><span class="hljs-keyword">\#export</span><span class="hljs-params">(<span class="hljs-string">"message"</span>, <span class="hljs-string">"This is an export example"</span>)</span></span>
<span class="hljs-function"><span class="hljs-keyword">\#export</span><span class="hljs-params">(<span class="hljs-string">"cardTitle"</span>, <span class="hljs-string">card.title</span>)</span></span>
</code></pre>
<pre><code class="language-html hljs xml">&lt;!-- variant with body --&gt;
<span class="hljs-function"><span class="hljs-keyword">\#extend</span><span class="hljs-params">(<span class="hljs-string">"base"</span>):</span></span>
    <span class="hljs-function"><span class="hljs-keyword">\#export</span><span class="hljs-params">(<span class="hljs-string">"content"</span>):</span></span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
            Content body...
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-keyword">\#endexport</span>
<span class="hljs-keyword">\#endextend</span>
</code></pre>
    </p>
    
    <h3>Loops and Conditions related</h3>
    see <a href="/conditions">Loops & Conditions</a>
    
    <h2>Custom tags</h2>
    <p>
        On top of standard tags, you can easily add new functionality writing you own custom tags. We have implemented tag <codeclass="language-swift hljs"><span class="hljs-keyword">\#now</span></code>. You can see it changes its value when you reload this page.
    </p>
    <p class="text-red-500">#now</p>
    <p>Check <a href="https://github.com/fananek/Leaf4Demo/blob/master/Sources/App/CustomTags/NowTag.swift" target="blank"><codeclass="language-swift hljs"><span class="hljs-keyword">NowTag.swift</span></code></a> to see implementation details.</p>
    
    <h3>Unsafe HTML tag</h3>
    <p>
        Leaf offers <codeclass="language-swift hljs"><span class="hljs-keyword">\#unsafeHTML</span></code> tag for rendering parameters you trust that contain HTML you want to leave intact. Your custom tag has to conform to <codeclass="language-swift hljs"><span class="hljs-keyword">UnsafeUnescapedLeafTag</span></code> protocol in order to avoid escaping a HTML.
    </p>
    <p>
        Following example uses custom tag called <a href="https://github.com/fananek/Leaf4Demo/blob/master/Sources/App/CustomTags/NowTableTag.swift" target="blank"><codeclass="language-swift hljs"><span class="hljs-keyword">\#nowTable</span></code></a> to render a table with date and time based on input parameter.
    </p>
    #nowTable

</div>

#endexport
#endextend

#endexport
#endextend
